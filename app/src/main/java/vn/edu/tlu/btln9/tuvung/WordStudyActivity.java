package vn.edu.tlu.btln9.tuvung;

import android.content.SharedPreferences;
import android.os.Bundle;
import android.speech.tts.TextToSpeech;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import com.google.firebase.database.*;

import java.util.ArrayList;
import java.util.Locale;

public class WordStudyActivity extends AppCompatActivity {

    private TextView tvTopic, tvWord, tvPronounce, tvMeaning, tvExample, tvProgress;
    private Button btnSpeak, btnNext, btnPrevious;

    private ArrayList<Word> wordList = new ArrayList<>();
    private int currentIndex = 0;

    private TextToSpeech tts;
    private String topicId;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_word_study);

        // ‚úÖ C·∫•u h√¨nh Toolbar
        androidx.appcompat.widget.Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        toolbar.setNavigationOnClickListener(v -> finish()); // Quay l·∫°i m√†n tr∆∞·ªõc

        // ‚úÖ L·∫•y topicId t·ª´ Intent
        topicId = getIntent().getStringExtra("topicId");

        // ‚úÖ √Ånh x·∫° View
        tvTopic = findViewById(R.id.tvTopic);
        tvWord = findViewById(R.id.tvWord);
        tvPronounce = findViewById(R.id.tvPronounce);
        tvMeaning = findViewById(R.id.tvMeaning);
        tvExample = findViewById(R.id.tvExample);
        tvProgress = findViewById(R.id.tvProgress);
        btnSpeak = findViewById(R.id.btnSpeak);
        btnNext = findViewById(R.id.btnNext);
        btnPrevious = findViewById(R.id.btnPrevious);

        tvTopic.setText("üìö Ch·ªß ƒë·ªÅ: " + topicId);

        // ‚úÖ Kh·ªüi t·∫°o Text-to-Speech
        tts = new TextToSpeech(this, status -> {
            if (status == TextToSpeech.SUCCESS) {
                tts.setLanguage(Locale.US);
            }
        });

        // ‚úÖ L·∫•y d·ªØ li·ªáu t·ª´ Firebase
        DatabaseReference wordsRef = FirebaseDatabase.getInstance().getReference("vocabulary");
        wordsRef.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                wordList.clear();
                for (DataSnapshot child : snapshot.getChildren()) {
                    Word word = child.getValue(Word.class);
                    if (word != null && topicId.equalsIgnoreCase(word.getTopic())) {
                        wordList.add(word);
                    }
                }

                if (!wordList.isEmpty()) {
                    currentIndex = 0;
                    showWord(currentIndex);
                } else {
                    Toast.makeText(WordStudyActivity.this, "‚ùå Ch·ªß ƒë·ªÅ ch∆∞a c√≥ t·ª´ v·ª±ng!", Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                Toast.makeText(WordStudyActivity.this, "L·ªói Firebase!", Toast.LENGTH_SHORT).show();
            }
        });

        // ‚úÖ Ph√°t √¢m
        btnSpeak.setOnClickListener(v -> {
            if (!wordList.isEmpty()) {
                String text = wordList.get(currentIndex).getWord();
                tts.speak(text, TextToSpeech.QUEUE_FLUSH, null, null);
            }
        });

        // ‚úÖ T·ª´ ti·∫øp theo
        btnNext.setOnClickListener(v -> {
            if (currentIndex < wordList.size() - 1) {
                currentIndex++;
                showWord(currentIndex);
            } else {
                Toast.makeText(this, "üéâ B·∫°n ƒë√£ h·ªçc h·∫øt t·ª´ trong ch·ªß ƒë·ªÅ!", Toast.LENGTH_SHORT).show();
                updateProgressOncePerTopic();
            }
        });

        // ‚úÖ T·ª´ tr∆∞·ªõc
        btnPrevious.setOnClickListener(v -> {
            if (currentIndex > 0) {
                currentIndex--;
                showWord(currentIndex);
            } else {
                Toast.makeText(this, "üìå ƒê√¢y l√† t·ª´ ƒë·∫ßu ti√™n!", Toast.LENGTH_SHORT).show();
            }
        });
    }

    // ‚úÖ Hi·ªÉn th·ªã t·ª´ v·ª±ng theo ch·ªâ s·ªë
    private void showWord(int index) {
        Word w = wordList.get(index);
        tvWord.setText(w.getWord());
        tvPronounce.setText(w.getPronounce());
        tvMeaning.setText("üìù Nghƒ©a: " + w.getMeaning());
        tvExample.setText("üí¨ V√≠ d·ª•: " + w.getExample());
        tvProgress.setText("T·ª´ " + (index + 1) + " / " + wordList.size());
    }

    // ‚úÖ C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô h·ªçc (ch·ªâ m·ªôt l·∫ßn m·ªói ch·ªß ƒë·ªÅ)
    private void updateProgressOncePerTopic() {
        SharedPreferences prefs = getSharedPreferences("user_info", MODE_PRIVATE);
        String userKey = prefs.getString("userKey", null);

        if (userKey == null) {
            Toast.makeText(this, "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!", Toast.LENGTH_SHORT).show();
            return;
        }

        DatabaseReference progressRef = FirebaseDatabase.getInstance()
                .getReference("users")
                .child(userKey)
                .child("progress");

        progressRef.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                int topicsLearned = 0;
                int quizzesCompleted = 0;
                double averageScore = 0;
                int overallProgress;

                boolean alreadyLearned = snapshot.child("learnedTopics").hasChild(topicId);

                if (alreadyLearned) {
                    Toast.makeText(WordStudyActivity.this, "üéì Ch·ªß ƒë·ªÅ n√†y ƒë√£ ƒë∆∞·ª£c t√≠nh tr∆∞·ªõc ƒë√≥!", Toast.LENGTH_SHORT).show();
                    return;
                }

                if (snapshot.child("topicsLearned").exists()) {
                    topicsLearned = snapshot.child("topicsLearned").getValue(Integer.class);
                }
                if (snapshot.child("quizzesCompleted").exists()) {
                    quizzesCompleted = snapshot.child("quizzesCompleted").getValue(Integer.class);
                }
                if (snapshot.child("averageScore").exists()) {
                    averageScore = snapshot.child("averageScore").getValue(Double.class);
                }

                topicsLearned++;
                overallProgress = (int) ((topicsLearned * 10 + quizzesCompleted * 10 + averageScore) / 3);

                // ‚úÖ C·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi
                progressRef.child("topicsLearned").setValue(topicsLearned);
                progressRef.child("overallProgress").setValue(overallProgress);
                progressRef.child("learnedTopics").child(topicId).setValue(true); // ƒë√°nh d·∫•u ch·ªß ƒë·ªÅ ƒë√£ h·ªçc

                Toast.makeText(WordStudyActivity.this, "‚úÖ ƒê√£ c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô!", Toast.LENGTH_SHORT).show();
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                Toast.makeText(WordStudyActivity.this, "‚ùå L·ªói khi c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô", Toast.LENGTH_SHORT).show();
            }
        });
    }

    // ‚úÖ T·∫Øt Text-to-Speech khi tho√°t
    @Override
    protected void onDestroy() {
        if (tts != null) {
            tts.stop();
            tts.shutdown();
        }
        super.onDestroy();
    }
}
